dcast(DayTime ~ YearDay, value.var = 'VMT_total')
VMT_mat <- as.matrix(VMT_wide[,-c(1:3)])
rownames(VMT_mat) <- VMT_wide[,1]
plot_ly(y = rownames(VMT_mat),
x = gsub('.{3}$', '', colnames(VMT_mat)),
z=VMT_mat,
type = 'heatmap',showlegend=FALSE,
# colors = colorRampPalette(rev(brewer.pal(9,'Greys')))(9)) %>%
colors = scales::col_quantile(rev(brewer.pal(9,'Greys')),NULL,9)) %>%
layout(margin = list( b = 80), family = 'Serif')
VMT_wide <- Final_494[!is.na(Final_494$VMT_total),] %>%
select(YearDay,DayTime,VMT_total) %>%
dcast(DayTime ~ YearDay, value.var = 'VMT_total')
VMT_mat <- as.matrix(VMT_wide[,-c(1:3)])
rownames(VMT_mat) <- VMT_wide[,1]
plot_ly(y = rownames(VMT_mat),
x = gsub('.{3}$', '', colnames(VMT_mat)),
z=VMT_mat,
type = 'heatmap',showlegend=FALSE,
# colors = colorRampPalette(rev(brewer.pal(9,'Greys')))(9)) %>%
colors = scales::col_quantile(rev(brewer.pal(9,'Greys')),NULL,9)) %>%
layout(margin = list( b = 80), font = 'Serif')
VMT_wide <- Final_494[!is.na(Final_494$VMT_total),] %>%
select(YearDay,DayTime,VMT_total) %>%
dcast(DayTime ~ YearDay, value.var = 'VMT_total')
VMT_mat <- as.matrix(VMT_wide[,-c(1:3)])
rownames(VMT_mat) <- VMT_wide[,1]
plot_ly(y = rownames(VMT_mat),
x = gsub('.{3}$', '', colnames(VMT_mat)),
z=VMT_mat,
type = 'heatmap',showlegend=FALSE,
# colors = colorRampPalette(rev(brewer.pal(9,'Greys')))(9)) %>%
colors = scales::col_quantile(rev(brewer.pal(9,'Greys')),NULL,9)) %>%
layout(margin = list( b = 80), font = 'serif')
str(s)
str(d)
d <- Final_494 %>%
group_by(Hour) %>%
summarise(TT_avg = round(mean(TT_mean),3)) %>%
mutate(Time = c(1:length(TT_avg))) %>% select(Hour, TT_avg)
s <- Final_494 %>%
group_by(Hour) %>%
summarise(VMT_tot = round(mean(VMT_total),3)) %>%
mutate(Time = c(1:length(VMT_tot))) %>% select(Hour, VMT_tot)
TT_wide <- Final_494[!is.na(Final_494$TT_mean),] %>%
select(YearDay,DayTime,TT_mean) %>%
dcast(DayTime ~ YearDay, value.var = 'TT_mean')
TT_mat <- as.matrix(TT_wide[,-c(1:3)])
rownames(TT_mat) <- TT_wide[,1]
plot_ly(y = rownames(TT_mat),
x = gsub('.{3}$', '', colnames(TT_mat)),
z=TT_mat,
type = 'heatmap',showlegend=FALSE,
# colors = colorRampPalette(rev(brewer.pal(9,'Greys')))(9)) %>%
colors = scales::col_quantile(rev(brewer.pal(9,'Greys')),NULL,9)) %>%
layout(margin = list( b = 80), font = 'serif')
TT_wide <- Final_494[!is.na(Final_494$TT_mean),] %>%
select(YearDay,DayTime,TT_mean) %>%
filter(TT_mean < 3.5) %>%
dcast(DayTime ~ YearDay, value.var = 'TT_mean')
TT_mat <- as.matrix(TT_wide[,-c(1:3)])
rownames(TT_mat) <- TT_wide[,1]
plot_ly(y = rownames(TT_mat),
x = gsub('.{3}$', '', colnames(TT_mat)),
z=TT_mat,
type = 'heatmap',showlegend=FALSE,
# colors = colorRampPalette(rev(brewer.pal(9,'Greys')))(9)) %>%
colors = scales::col_quantile(rev(brewer.pal(9,'Greys')),NULL,9)) %>%
layout(margin = list( b = 80), font = 'serif')
TT_wide <- Final_494[!is.na(Final_494$TT_mean),] %>%
select(YearDay,DayTime,TT_mean) %>%
filter(TT_mean < 3.5) %>%
dcast(DayTime ~ YearDay, value.var = 'TT_mean')
TT_mat <- as.matrix(TT_wide[,-c(1:3)])
rownames(TT_mat) <- TT_wide[,1]
plot_ly(y = rownames(TT_mat),
x = gsub('.{3}$', '', colnames(TT_mat)),
z=TT_mat,
type = 'heatmap',showlegend=FALSE,
colors = colorRampPalette(rev(brewer.pal(9,'Greys')))(9)) %>%
layout(margin = list( b = 80), font = 'serif')
TT_wide <- Final_494[!is.na(Final_494$TT_mean),] %>%
select(YearDay,DayTime,TT_mean) %>%
filter(TT_mean < 3.5,TT_mean>1) %>%
dcast(DayTime ~ YearDay, value.var = 'TT_mean')
TT_mat <- as.matrix(TT_wide[,-c(1:3)])
rownames(TT_mat) <- TT_wide[,1]
plot_ly(y = rownames(TT_mat),
x = gsub('.{3}$', '', colnames(TT_mat)),
z=TT_mat,
type = 'heatmap',showlegend=FALSE,
colors = colorRampPalette(rev(brewer.pal(9,'Greys')))(9)) %>%
layout(margin = list( b = 80), font = 'serif')
summary(Final_494$VMT_total)
VMT_wide <- Final_494[!is.na(Final_494$VMT_total),] %>%
select(YearDay,DayTime,VMT_total) %>%
filter(VMT_total >250) %>%
dcast(DayTime ~ YearDay, value.var = 'VMT_total')
VMT_mat <- as.matrix(VMT_wide[,-c(1:3)])
rownames(VMT_mat) <- VMT_wide[,1]
plot_ly(y = rownames(VMT_mat),
x = gsub('.{3}$', '', colnames(VMT_mat)),
z=VMT_mat,
type = 'heatmap',showlegend=FALSE,
# colors = colorRampPalette(rev(brewer.pal(9,'Greys')))(9)) %>%
colors = scales::col_quantile(rev(brewer.pal(9,'Greys')),NULL,9)) %>%
layout(margin = list( b = 80), font = 'serif')
colnames(Final_494)
b <- Final_494[order(Final_494$TT_mean),]
c <- Final_494[order(Final_494$TT_mean),] %>%
filter(MNCMAT == 1)
d <- Final_494[order(Final_494$TT_mean),] %>%
filter(INCIDENT == 1)
e <- Final_494[order(Final_494$TT_mean),] %>%
filter(ROADWORK == 1)
f <- Final_494[order(Final_494$TT_mean),] %>%
filter(weather == 1)
g <- ggplot()+
theme_tufte(base_size = 10) +
theme(panel.background = element_rect(fill = "white", colour = "white")) +
stat_ecdf(data = b, aes(x = TT_mean, color= 'All'), geom = 'step') +
stat_ecdf(data = c, aes(x = TT_mean, color = 'CRASH'), geom = 'step') +
stat_ecdf(data = d, aes(x = TT_mean, color = 'INCIDENT'), geom = 'step') +
stat_ecdf(data = e, aes(x = TT_mean, color = 'ROADWORK'), geom = 'step') +
stat_ecdf(data = f, aes(x = TT_mean, color = 'weather'), geom = 'step') +
scale_x_continuous(breaks = seq(0,29,2)) +
ylab('Percentage')+xlab('Travel Time (mins)')
gg <-  ggplotly(g)
gg
#knitr::opts_knit$set(root.dir = "C:/Users/Declan/Desktop/Data/R/Cluster_analysis")
knitr::opts_knit$set(root.dir = "H:/Projects/10000/10682/TS/Scenario Manager/Cluster Analysis/Cleaned")
library(tidyverse)
library(lubridate)
library(gridExtra)
library(reshape2)
library(zoo)
library(plotly)
library(NbClust)
install.packages("NbClust")
#knitr::opts_knit$set(root.dir = "C:/Users/Declan/Desktop/Data/R/Cluster_analysis")
knitr::opts_knit$set(root.dir = "H:/Projects/10000/10682/TS/Scenario Manager/Cluster Analysis/Cleaned")
library(tidyverse)
library(lubridate)
library(gridExtra)
library(reshape2)
library(zoo)
library(plotly)
library(NbClust)
library(stringr)
library(ggthemes)
cluster_dat <- readxl::read_xlsx("Cluster Analysis Input Data.xlsx",sheet = 'Database')
str(cluster_dat)
colnames(cluster_dat) <-trimws(colnames(cluster_dat))
colnames(cluster_dat) <-gsub('([[:punct:]])|\\s+','_',colnames(cluster_dat))
colnames(cluster_dat)
class(cluster_dat$Time_Bin)
cluster_dat$Time_Bin <- as.POSIXct(as.character(cluster_dat$Time_Bin),tz="US/Central")
summary(cluster_dat$Time_Bin)
table(is.na(cluster_dat$Time_Bin))
summary(cluster_dat$Week)
cluster_dat[cluster_dat$Week==53,c(1:5,length(cluster_dat))]
summary(cluster_dat$Incident_Count)
hist(cluster_dat$Incident_Count,breaks = 30)
summary(cluster_dat$Incident_Impact)
par(mfrow=c(2,2))
hist(cluster_dat$Incident_Impact,breaks=seq(0,40,1),
xlab='Incident_Impact')
plot(cluster_dat$Incident_Impact[cluster_dat$Incident_Count!=0],cluster_dat$Incident_Count[cluster_dat$Incident_Count!=0],
xlab="Incident_Impact",ylab='Incident_Count')
plot(cluster_dat$Time_Bin[cluster_dat$Incident_Count!=0],cluster_dat$Incident_Count[cluster_dat$Incident_Count!=0],
xlab="Time",ylab='Incident_Count')
plot(cluster_dat$Density[cluster_dat$Incident_Count!=0],cluster_dat$Incident_Count[cluster_dat$Incident_Count!=0],
xlab="Density",ylab='Incident_Count')
##create a total sum value for minutes of incidents in each time bin.
cluster_dat_incident_melt <- reshape2::melt(cluster_dat,id.vars="Time_Bin",measure.vars='Incident_Duration')%>%
mutate(Hrs = as.numeric(format(value,"%H")),
Mins = as.numeric(format(value,"%M")))%>%
mutate(total = Hrs*60+Mins)%>%
group_by(Time_Bin)%>%
summarise(sum = sum(total))
cluster_dat$Incident <- cluster_dat_incident_melt$sum
# We want to classify the Incident into severities. We will use the MNCMAT determination as a starting point for time bins:
#
# * Fatal 180 mins
# * Incapacitating Injury 90 mins
# * Non-Incapacitating Injury 45 mins
# * Possible Injury 30 mins
# * Property Damage 30 mins
# * Unknown 30 mins
#
# Our time bins will be:
# + = 0 mins,
# + 0 < x <= 30 mins,
# + 30 < x <= 45 mins,
# + 45 < x <= 90 mins,
# + 90 < x <= 180 mins,
# + 180 mins < x
# sev <-  data.frame(inc_sev=c('0 mins','30 mins','45 mins','90 mins','180 mins','> 180 mins'),
#                    symbol=c('circle', 'square', 'diamond','cross', 'x','triangle-down'))
#
#
# cluster_dat$inc_sev <- ifelse(cluster_dat$Incident==0,'0 mins',
#                               ifelse(cluster_dat$Incident>0&cluster_dat$Incident<30,'30 mins',
#                               ifelse(cluster_dat$Incident>30&cluster_dat$Incident<45,'45 mins',
#                               ifelse(cluster_dat$Incident>45&cluster_dat$Incident<90,'90 mins',
#                               ifelse(cluster_dat$Incident>90&cluster_dat$Incident<180,'180 mins',
#                               ifelse(cluster_dat$Incident>180,'> 180 mins','> 180 mins'))))))
#
# cluster_dat <- merge(cluster_dat,sev,by='inc_sev')
summary(cluster_dat$Roadwork_Count)
table(cluster_dat$Roadwork_Count)
par(mfrow=c(2,2))
hist(cluster_dat$Roadwork_Count[cluster_dat$Roadwork_Count!=0],xlab='Roadwork_Impact',main='Roadwork_Count')
plot(cluster_dat$Roadwork_Count[cluster_dat$Roadwork_Count!=0],cluster_dat$Roadwork_Impact[cluster_dat$Roadwork_Count!=0],
xlab="Roadwork_Count",ylab='Roadwork_Impact')
plot(cluster_dat$Time_Bin[cluster_dat$Roadwork_Count!=0],cluster_dat$Roadwork_Count[cluster_dat$Roadwork_Count!=0],
xlab="Time",ylab='Roadwork_Count')
plot(cluster_dat$Density[cluster_dat$Roadwork_Count!=0],cluster_dat$Roadwork_Count[cluster_dat$Roadwork_Count!=0],
xlab="Density",ylab='Roadwork_Count')
x <- as.numeric(format(cluster_dat$Roadwork_Duration,"%H"))
x <- x[x>0]
table(x)
cluster_dat <- cluster_dat %>%
mutate(Hour = format(Time_Bin,"%H"),
Minute = format(Time_Bin,"%M"),
Weekday = weekdays(cluster_dat$Time_Bin),
Week = lubridate::week(cluster_dat$Time_Bin),
Month = months(cluster_dat$Time_Bin),
YearDay = yday(cluster_dat$Time_Bin))%>%
filter(Hour == 14)%>%
as.data.frame()
cluster_dat$Weekday <-  factor(cluster_dat$Weekday,levels=c("Sunday", "Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
cluster_dat$Month <- factor(cluster_dat$Month,levels=c("January","February","March",
"April","May","June","July","August","September",
"October","November","December"),ordered=TRUE)
summary(cluster_dat$Density)
br_dens <- seq(0,50,2)
ranges_dens = paste(head(br_dens,-1), br_dens[-1], sep=" - ")
freq_dens <- hist(cluster_dat$Density, breaks=br_dens, include.lowest=TRUE, plot=FALSE)
freq_table_dens <-  data.frame(data.frame(range = ranges_dens, frequency = freq_dens$counts))
freq_table_dens[order(-freq_table_dens$frequency),]
plot(freq_dens)
ggplot(cluster_dat,aes(x=Weekday,y=Density,color=Weekday))+
geom_violin()+
geom_jitter(alpha=0.25)
summary(cluster_dat$Volume)
br_vol <- seq(0,600000,20000)
ranges_vol = paste(head(br_vol,-1), br_vol[-1], sep=" - ")
freq_vol <- hist(cluster_dat$Volume, breaks=br_vol, include.lowest=TRUE, plot=FALSE)
freq_table_vol <-  data.frame(data.frame(range = ranges_vol, frequency = freq_vol$counts))
freq_table_vol[order(-freq_table_vol$frequency),]
plot(freq_vol)
summary(cluster_dat$Speed)
br_speed <- seq(30,100,2)
ranges_speed = paste(head(br_speed,-1), br_speed[-1], sep=" - ")
freq_speed <- hist(cluster_dat$Speed, breaks=br_speed, include.lowest=TRUE, plot=FALSE)
freq_table_speed <-  data.frame(data.frame(range = ranges_speed, frequency = freq_speed$counts))
freq_table_speed[order(-freq_table_speed$frequency),]
plot(freq_speed)
means <-  aggregate(Speed~Weekday,cluster_dat,mean)
ggplot(cluster_dat,aes(x=Weekday,y=Speed))+
geom_violin(aes(color=Weekday))+
geom_jitter(aes(color=Weekday),alpha=0.25)+
stat_summary(fun.y=mean, colour="#990000", geom="point",
shape=18, size=3,show_guide = FALSE)+
geom_text(data=means, aes(label = paste('Mean:\n',round(Speed,2),sep=''), y = Speed + 2.5),size=3,fontface='bold')+
ylab('Speed mph')+
theme(legend.position="none")
means <-  aggregate(Speed~Month,cluster_dat,mean)
ggplot(cluster_dat,aes(x=Month,y=Speed))+
geom_violin(aes(color=Month))+
geom_jitter(aes(color=Month),alpha=0.25)+
stat_summary(fun.y=mean, colour="#990000", geom="point",
shape=18, size=3,show_guide = FALSE)+
geom_text(data=means, aes(label = paste('Mean:\n',round(Speed,2),sep=''), y = Speed + 2.5),color='darkred',size=3,fontface='bold')+
ylab('Speed mph')+
theme(legend.position="none")
ggplot(cluster_dat,aes(x=YearDay,y=Speed,color=Weekday))+
geom_point(aplha=0.25)+
geom_smooth()+
theme_solarized()+scale_colour_solarized('blue')+
ggtitle('Speed per Day grouped by Weekday')+
theme(plot.title = element_text(hjust = 0.5))
hols_2017 <- as.POSIXct(c('2017-01-02 14:00','2017-05-29 14:00','2017-07-03 14:00','2017-07-04 14:00','2017-09-04 14:00','2017-11-23 14:00','2017-11-24 14:00','2017-12-25 14:00'))
table(cluster_dat$Time_Bin %in% hols_2017)
cluster_dat$hols_2017 <- cluster_dat$Time_Bin %in% hols_2017
g <- ggplot(cluster_dat,aes(x=Weekday,y=Density))+
geom_point(aes(alpha=0.25,color=hols_2017))
plotly::ggplotly(g)
s <- ggplot(cluster_dat,aes(x=Weekday,y=Speed))+
geom_point(aes(alpha=0.25,color=hols_2017))
plotly::ggplotly(s)
##create a total sum value for minutes of weather events in each time bin.
cluster_dat_melt_RS <- reshape2::melt(cluster_dat,id.vars="Time_Bin",measure.vars=c("Light_Rain","Light_Snow","Moderate_Rain","Moderate_Snow","Heavy_Snow","Heavy_Rain"))%>%
mutate(Hrs = as.numeric(format(value,"%H")),
Mins = as.numeric(format(value,"%M")),
Percip = str_sub(variable,-4))%>%
mutate(total = Hrs*60+Mins)%>%
group_by(Time_Bin,Percip)%>%
summarise(sum = sum(total))%>%
dcast(Time_Bin~Percip,value.var = 'sum')
cluster_dat_melt_weather <- reshape2::melt(cluster_dat,id.vars="Time_Bin",measure.vars=colnames(cluster_dat)[11:16])%>%
mutate(Hrs = as.numeric(format(value,"%H")),
Mins = as.numeric(format(value,"%M")))%>%
mutate(total = Hrs*60+Mins)%>%
group_by(Time_Bin)%>%
summarise(sum = sum(total))
cluster_dat$weather <- cluster_dat_melt_weather$sum
cluster_dat$Rain <- cluster_dat_melt_RS$Rain
cluster_dat$Snow <- cluster_dat_melt_RS$Snow
rm(cluster_dat_melt_RS,cluster_dat_melt_weather)
##filter out the weekends
'%ni%' <- Negate('%in%')
cluster_dat_midweek <- cluster_dat %>%
filter(Weekday %ni% c('Saturday','Sunday'))
## K Means Clustering {.tabset .tabset-fade}
cluster_dat_weekend <- cluster_dat %>%
filter(Weekday %in% c('Saturday','Sunday'))
write.csv(cluster_dat_midweek,'cluster_dat_midweek.csv')
library(flexdashboard)
#knitr::opts_knit$set(root.dir = "C:/Users/Declan/Desktop/Data/R/Cluster_analysis")
knitr::opts_knit$set(root.dir = "H:/Projects/10000/10682/TS/Scenario Manager/Cluster Analysis/Cleaned")
library(tidyverse)
library(lubridate)
library(gridExtra)
library(reshape2)
library(zoo)
library(plotly)
library(NbClust)
library(stringr)
library(ggthemes)
cluster_dat_midweek <- read.csv('cluster_dat_midweek.csv')
dir()
write.csv(cluster_dat_midweek,'cluster_dat_midweek.csv')
dir()
cluster_dat_midweek <- read.csv('cluster_dat_midweek.csv')
clust <- read.csv('cluster_dat_midweek.csv')%>%select(Speed,YearDay)%>%scale()
View(cluster_dat)
clust <- read.csv('cluster_dat_midweek.csv')%>%select(Speed,YearDay)%>%scale()
clust <- read.csv('cluster_dat_midweek.csv') %>% select(Speed,YearDay)
clust <- read.csv('cluster_dat_midweek.csv') %>% select(Speed,YearDay,Rain, Snow, Incident) %>% scale()
View(clust)
clust[1,1:5]
class(clust)
clust[1,'Rain']
names(clust)
clust <- read.csv('cluster_dat_midweek.csv') %>% select(Speed,YearDay,Rain, Snow, Incident) %>% scale() %>%data.frame()
names(clust)
library(flexdashboard)
#knitr::opts_knit$set(root.dir = "C:/Users/Declan/Desktop/Data/R/Cluster_analysis")
knitr::opts_knit$set(root.dir = "H:/Projects/10000/10682/TS/Scenario Manager/Cluster Analysis/Cleaned")
library(tidyverse)
library(lubridate)
library(gridExtra)
library(reshape2)
library(zoo)
library(plotly)
library(NbClust)
library(stringr)
library(ggthemes)
clust <- read.csv('cluster_dat_midweek.csv') %>% select(Speed,YearDay,Rain, Snow, Incident) %>% scale() %>%data.frame()
# Chunk 1: global
library(flexdashboard)
#knitr::opts_knit$set(root.dir = "C:/Users/Declan/Desktop/Data/R/Cluster_analysis")
knitr::opts_knit$set(root.dir = "H:/Projects/10000/10682/TS/Scenario Manager/Cluster Analysis/Cleaned")
library(tidyverse)
library(lubridate)
library(gridExtra)
library(reshape2)
library(zoo)
library(plotly)
library(NbClust)
library(stringr)
library(ggthemes)
clust <- read.csv('cluster_dat_midweek.csv') %>% select(Speed,YearDay,Rain, Snow, Incident) %>% scale() %>%data.frame()
# Chunk 2
selectInput('xcol', 'X Variable', names(clust))
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]])
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
# Chunk 3
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
# Combine the selected variables into a new data frame
selectedData <- reactive({
clust[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
install.packages("shiny")
library(flexdashboard)
#knitr::opts_knit$set(root.dir = "C:/Users/Declan/Desktop/Data/R/Cluster_analysis")
knitr::opts_knit$set(root.dir = "H:/Projects/10000/10682/TS/Scenario Manager/Cluster Analysis/Cleaned")
library(tidyverse)
library(lubridate)
library(gridExtra)
library(reshape2)
library(zoo)
library(plotly)
library(NbClust)
library(stringr)
library(ggthemes)
clust <- read.csv('cluster_dat_midweek.csv') %>% select(Speed,YearDay,Rain, Snow, Incident) %>% scale() %>%data.frame()
selectInput('xcol', 'X Variable', names(clust))
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]])
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
# Combine the selected variables into a new data frame
selectedData <- reactive({
clust[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
dir()
library(flexdashboard)
knitr::opts_knit$set(root.dir = "H:/Projects/10000/10682/TS/Scenario Manager/Cluster Analysis/Cleaned")
library(tidyverse)
library(lubridate)
library(gridExtra)
library(reshape2)
library(zoo)
library(plotly)
library(NbClust)
library(stringr)
library(ggthemes)
clust <- read.csv('cluster_dat_midweek.csv') %>% select(Speed,YearDay,Rain, Snow, Incident) %>% scale() %>%data.frame()
library(flexdashboard)
knitr::opts_knit$set(root.dir = "H:/Projects/10000/10682/TS/Scenario Manager/Cluster Analysis/Cleaned")
library(tidyverse)
library(lubridate)
library(gridExtra)
library(reshape2)
library(zoo)
library(plotly)
library(NbClust)
library(stringr)
library(ggthemes)
clust <- read.csv('cluster_dat_midweek.csv') %>% select(Speed,YearDay,Rain, Snow, Incident) %>% scale() %>%data.frame()
selectInput('xcol', 'X Variable', names(clust))
selectInput('ycol', 'Y Variable', names(iris),
selected=names(iris)[[2]])
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
dir()
selectInput('xcol', 'X Variable', names(clust))
selectInput('ycol', 'Y Variable', names(clust),
selected=names(clust)[[2]])
selectInput('zcol', 'Z Variable', names(clust),
selected=names(clust)[[3]])
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
#knitr::opts_knit$set(root.dir = "C:/Users/Declan/Desktop/Data/R/Cluster_analysis")
knitr::opts_knit$set(root.dir = "H:/Projects/10000/10682/TS/Scenario Manager/Cluster Analysis/Cleaned")
library(tidyverse)
library(lubridate)
library(gridExtra)
library(reshape2)
library(zoo)
library(plotly)
library(NbClust)
library(stringr)
library(ggthemes)
plotly::plot_ly(cluster_dat_midweek,x=~YearDay,y=~Speed,z=~weather,
color=~cluster, hoverinfo='text',
text = ~paste('Speed:', round(Speed,2), '<br>Weather mins:', weather, '<br>Time_Bin:', format(Time_Bin,"%Y-%m-%d")))%>%
add_markers()
plotly::plot_ly(cluster_dat_midweek,x=~YearDay,y=~Speed,z=~weather,
color=~cluster, hoverinfo='text',
)%>%
add_markers()%>%
plotly::plot_ly(cluster_dat_midweek,x=~YearDay,y=~Speed,z=~weather,
color=~cluster, hoverinfo='text',
)%>%
add_markers()
plotly::plot_ly(cluster_dat_midweek,x=~YearDay,y=~Speed,z=~weather,
color=~cluster, hoverinfo='text'
)%>%
add_markers()
plotly::plot_ly(cluster_dat_midweek,x=~YearDay,y=~Speed,z=~weather, hoverinfo='text'
)%>%
add_markers()
head(clust)
shiny::runApp('C:/Users/dgallen/Desktop/R/Shiny/kmeans_app')
runApp('C:/Users/dgallen/Desktop/R/Shiny/kmeans_app')
runApp('C:/Users/dgallen/Desktop/R/Shiny/kmeans_app')
clust[,c(Rain,"YearDay")]
clust[,c("Rain","YearDay")]
runApp('C:/Users/dgallen/Desktop/R/Shiny/kmeans_app')
head(clust)
runApp('C:/Users/dgallen/Desktop/R/Shiny/kmeans_app')
runApp('C:/Users/dgallen/Desktop/R/Shiny/kmeans_app')
